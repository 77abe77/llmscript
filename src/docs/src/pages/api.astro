---
// src/pages/index.astro
import { getCollection } from 'astro:content'
import Navigation from '../components/Navigation.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'

function getOrderFromPath(path: string): number[] {
  // Split path into segments
  const segments = path.split('/')

  // Map each segment to its order number
  return segments.map((segment) => {
    // Extract number from start of segment (e.g., "01-introduction" => 1)
    const match = segment.match(/^(\d+)-/)
    // If there's no match or no capture group, return a high number
    if (!match || !match[1]) {
      return Number.MAX_SAFE_INTEGER
    }
    return parseInt(match[1], 10)
  })
}

function compareOrderedPaths(a: string, b: string): number {
  const aOrders = getOrderFromPath(a)
  const bOrders = getOrderFromPath(b)

  // Compare each segment's order number
  const minLength = Math.min(aOrders.length, bOrders.length)

  for (let i = 0; i < minLength; i++) {
    const aOrder = aOrders[i] ?? Number.MAX_SAFE_INTEGER
    const bOrder = bOrders[i] ?? Number.MAX_SAFE_INTEGER

    if (aOrder !== bOrder) {
      return aOrder - bOrder
    }
  }

  // If all segments match, shorter paths come first
  return aOrders.length - bOrders.length
}

// Get all markdown files from content/docs
const allDocs = await getCollection('docs')

// Sort by the number prefix in filename
const sortedDocs = allDocs.sort((a, b) => compareOrderedPaths(a.slug, b.slug))

// Render all markdown content
const renderedDocs = await Promise.all(
  sortedDocs
    .filter((doc) => doc.filePath?.includes('apidocs'))
    .map(async (doc) => {
      const { Content } = await doc.render()
      return { ...doc, Content }
    })
)
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ax Documentation</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap"
      rel="stylesheet"
    />
  </head>

  <body class="bg-warmGray-100 font-mono min-h-screen">
    <Navigation />
    <div class="max-w-6xl mx-auto p-2">
      <Header />
      <!-- Main Content - Rendered Markdown Sections -->
      <main class="mt-12 space-y-24">
        {
          renderedDocs.map(({ Content, slug, data }) => (
            <section
              id={slug}
              class="bg-warmGray-50 rounded-lg p-4 md:p-8 shadow-lg border border-gray-200"
            >
              <div class="mb-6">
                <h2 class="text-xl text-gray-700 font-bold flex items-center">
                  <span class="text-blue-400 mr-2">></span>
                  {data.title}
                </h2>
                {data.description && (
                  <p class="text-gray-600 mt-2">{data.description}</p>
                )}
              </div>

              <div class="prose !max-w-none prose-inline-code:p-1 prose-inline-code:bg-indigo-50 prose-inline-code:before:content-none prose-inline-code:after:content-none prose-gray prose-pre:bg-gray-800 prose-pre:text-gray-100">
                <Content />
              </div>
            </section>
          ))
        }
      </main>
      <Footer />
    </div>
  </body>
</html>
