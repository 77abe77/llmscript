import type { AxAIService } from '../ai/types.js'
import type { AxAIMemory } from '../mem/types.js'

import type { AxField } from './sig.js'
import { toFieldType } from './prompt.js'

export class ValidationError extends Error {
  private fields: AxField[]

  constructor({
    message,
    fields,
  }: Readonly<{
    message: string
    fields: AxField[]
    value?: string
  }>) {
    super(message)
    this.fields = fields
    this.name = this.constructor.name
  }

  public getFixingInstructions = (): {
    name: string
    title: string
    description: string
  }[] => {
    return this.fields.map((field) => ({
      name: 'outputError',
      title: 'Output Correction Required',
      description: `The section labeled '${field.name}' either was not generated by the LLM or does not match the expected format of '${toFieldType(field)}'. ${this.message} Please revise your response to ensure it conforms to the specified format.`,
    }))
  }

  override toString(): string {
    return [
      `${this.name}: ${this.message}`,
      ...this.fields.map(
        (field) =>
          `  - ${field.name}: Expected format '${toFieldType(field)}'`
      ),
    ].join('\n')
  }

  [Symbol.for('nodejs.util.inspect.custom')](
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _depth: number,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options: Record<string, unknown>
  ) {
    return this.toString()
  }
}

export function handleValidationError(
  mem: AxAIMemory,
  errorFields: { name: string; title: string; description: string }[],
  ai: Readonly<AxAIService>,
  sessionId?: string
) {
  // The description from getFixingInstructions is the complete message for the LLM.
  // We can just join them to form a single instructional message.
  const userMessage = errorFields.map((f) => f.description).join('\n')

  mem.add(
    {
      role: 'user' as const,
      content: [
        {
          type: 'text',
          text: `Please correct the following errors in your last response:\n${userMessage}`,
        },
      ],
    },
    sessionId
  )
  mem.addTag('error', sessionId)

  if (ai.getOptions().debug) {
    const logger = ai.getLogger()
    logger(`‚ùå Error Correction:\n${userMessage}`, {
      tags: ['error'],
    })
  }
}